################################################################################
# PHASE 1: INITIAL DEPLOYMENT (First 5 Minutes)
################################################################################

################################################################################
# File: phase1_initial/01_enum.sh
# Purpose: Rapid system enumeration - RUN THIS FIRST
# Usage: ./01_enum.sh
################################################################################
#!/bin/bash

echo "==================================="
echo "SYSTEM ENUMERATION - $(date)"
echo "==================================="

OUTPUT="enum_$(hostname)_$(date +%Y%m%d_%H%M%S).txt"

{
echo "=== BASIC SYSTEM INFO ==="
echo "Hostname: $(hostname)"
echo "Date: $(date)"
echo "Uptime: $(uptime)"
uname -a
cat /etc/os-release 2>/dev/null || cat /etc/redhat-release 2>/dev/null

echo -e "\n=== CURRENT USER ==="
whoami
id
groups

echo -e "\n=== ALL USERS ==="
cat /etc/passwd | column -t -s:

echo -e "\n=== SUDO USERS ==="
grep -Po '^sudo.+:\K.*$' /etc/group 2>/dev/null
getent group sudo 2>/dev/null
getent group wheel 2>/dev/null
cat /etc/sudoers 2>/dev/null | grep -v "^#" | grep -v "^$"

echo -e "\n=== USERS WITH BASH SHELLS ==="
grep "/bash" /etc/passwd

echo -e "\n=== RECENTLY CREATED USERS (last 7 days) ==="
awk -F: '{print $1,$3}' /etc/passwd | while read user uid; do
    if [ -d "/home/$user" ]; then
        created=$(stat -c %w /home/$user 2>/dev/null || echo "unknown")
        echo "$user (UID: $uid) - Home created: $created"
    fi
done

echo -e "\n=== NETWORK INTERFACES ==="
ip addr show
ifconfig 2>/dev/null

echo -e "\n=== LISTENING PORTS ==="
ss -tulpn 2>/dev/null || netstat -tulpn 2>/dev/null

echo -e "\n=== ESTABLISHED CONNECTIONS ==="
ss -tupn 2>/dev/null | grep ESTAB || netstat -tupn 2>/dev/null | grep ESTABLISHED

echo -e "\n=== ROUTING TABLE ==="
ip route
route -n 2>/dev/null

echo -e "\n=== RUNNING SERVICES ==="
systemctl list-units --type=service --state=running 2>/dev/null || service --status-all 2>/dev/null

echo -e "\n=== ENABLED SERVICES ==="
systemctl list-unit-files --type=service --state=enabled 2>/dev/null

echo -e "\n=== FIREWALL STATUS ==="
ufw status verbose 2>/dev/null
iptables -L -n -v 2>/dev/null
firewall-cmd --list-all 2>/dev/null

echo -e "\n=== CRON JOBS ==="
echo "Root crontab:"
crontab -l 2>/dev/null
echo -e "\nSystem crontab:"
cat /etc/crontab 2>/dev/null
echo -e "\nCron directories:"
ls -la /etc/cron.* 2>/dev/null

echo -e "\n=== SCHEDULED TASKS (systemd timers) ==="
systemctl list-timers --all 2>/dev/null

echo -e "\n=== WORLD WRITABLE DIRECTORIES ==="
find / -type d -perm -0002 -ls 2>/dev/null | head -20

echo -e "\n=== SUID BINARIES ==="
find / -perm -4000 -type f 2>/dev/null

echo -e "\n=== DISK USAGE ==="
df -h

echo -e "\n=== MOUNTED FILESYSTEMS ==="
mount | column -t

echo -e "\n=== RUNNING PROCESSES (top 20) ==="
ps auxf | head -20

echo -e "\n=== WEB SERVER CHECK ==="
if systemctl is-active --quiet apache2; then
    echo "Apache2 is running"
    apache2 -v 2>/dev/null
    ls -la /etc/apache2/ 2>/dev/null
    ls -la /var/www/ 2>/dev/null
elif systemctl is-active --quiet nginx; then
    echo "Nginx is running"
    nginx -v 2>/dev/null
    ls -la /etc/nginx/ 2>/dev/null
    ls -la /var/www/ 2>/dev/null
fi

echo -e "\n=== DATABASE CHECK ==="
if systemctl is-active --quiet mysql || systemctl is-active --quiet mariadb; then
    echo "MySQL/MariaDB is running"
    mysql --version 2>/dev/null
fi
if systemctl is-active --quiet postgresql; then
    echo "PostgreSQL is running"
    psql --version 2>/dev/null
fi

echo -e "\n=== SSH CONFIGURATION ==="
grep -v "^#" /etc/ssh/sshd_config 2>/dev/null | grep -v "^$"

echo -e "\n=== LAST LOGINS ==="
last -20

echo -e "\n=== FAILED LOGIN ATTEMPTS ==="
grep "Failed password" /var/log/auth.log 2>/dev/null | tail -20
grep "Failed password" /var/log/secure 2>/dev/null | tail -20

} > "$OUTPUT"

echo "Enumeration complete! Results saved to: $OUTPUT"
cat "$OUTPUT" | less

################################################################################
# File: phase1_initial/02_quick_harden.sh
# Purpose: Immediate system hardening
# Usage: sudo ./02_quick_harden.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "QUICK HARDENING - $(date)"
echo "========================================="

# Create backup directory
BACKUP_DIR="/root/backups_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo "[+] Backup directory: $BACKUP_DIR"

# Backup critical files
echo "[+] Backing up critical configuration files..."
cp /etc/passwd "$BACKUP_DIR/"
cp /etc/shadow "$BACKUP_DIR/"
cp /etc/group "$BACKUP_DIR/"
cp /etc/sudoers "$BACKUP_DIR/"
cp /etc/ssh/sshd_config "$BACKUP_DIR/"
cp /etc/crontab "$BACKUP_DIR/"
[ -d /etc/apache2 ] && cp -r /etc/apache2 "$BACKUP_DIR/"
[ -d /etc/nginx ] && cp -r /etc/nginx "$BACKUP_DIR/"

# Enable and configure firewall
echo "[+] Configuring firewall..."
if command -v ufw &> /dev/null; then
    ufw --force enable
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow 22/tcp comment 'SSH'
    ufw allow 80/tcp comment 'HTTP'
    ufw allow 443/tcp comment 'HTTPS'
    # Add more ports as needed for your services
    ufw reload
    echo "UFW firewall enabled"
elif command -v firewall-cmd &> /dev/null; then
    systemctl enable firewalld
    systemctl start firewalld
    firewall-cmd --set-default-zone=public
    firewall-cmd --zone=public --add-service=ssh --permanent
    firewall-cmd --zone=public --add-service=http --permanent
    firewall-cmd --zone=public --add-service=https --permanent
    firewall-cmd --reload
    echo "Firewalld enabled"
else
    # Fallback to iptables
    iptables -F
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -P OUTPUT ACCEPT
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp --dport 443 -j ACCEPT
    echo "Basic iptables rules applied"
fi

# Harden SSH
echo "[+] Hardening SSH configuration..."
sed -i.bak 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/^#*PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config
sed -i 's/^#*X11Forwarding.*/X11Forwarding no/' /etc/ssh/sshd_config
sed -i 's/^#*MaxAuthTries.*/MaxAuthTries 3/' /etc/ssh/sshd_config
sed -i 's/^#*ClientAliveInterval.*/ClientAliveInterval 300/' /etc/ssh/sshd_config
sed -i 's/^#*ClientAliveCountMax.*/ClientAliveCountMax 2/' /etc/ssh/sshd_config
sed -i 's/^#*Protocol.*/Protocol 2/' /etc/ssh/sshd_config

# Restart SSH
systemctl restart sshd 2>/dev/null || systemctl restart ssh 2>/dev/null || service ssh restart 2>/dev/null
echo "SSH hardened and restarted"

# Enable audit logging
echo "[+] Enabling audit logging..."
if command -v auditd &> /dev/null; then
    systemctl enable auditd
    systemctl start auditd
    echo "Auditd enabled"
fi

# Disable unnecessary services
echo "[+] Disabling risky services..."
RISKY_SERVICES=("telnet" "rsh" "rlogin" "vsftpd" "pure-ftpd" "proftpd")
for service in "${RISKY_SERVICES[@]}"; do
    systemctl disable "$service" 2>/dev/null
    systemctl stop "$service" 2>/dev/null
done

# Set password policies
echo "[+] Configuring password policies..."
sed -i.bak 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS   90/' /etc/login.defs
sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS   1/' /etc/login.defs
sed -i 's/^PASS_MIN_LEN.*/PASS_MIN_LEN    12/' /etc/login.defs
sed -i 's/^PASS_WARN_AGE.*/PASS_WARN_AGE   7/' /etc/login.defs

# Enable password quality requirements (if pam_pwquality is available)
if [ -f /etc/security/pwquality.conf ]; then
    sed -i.bak 's/^# minlen.*/minlen = 12/' /etc/security/pwquality.conf
    sed -i 's/^# dcredit.*/dcredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# ucredit.*/ucredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# lcredit.*/lcredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# ocredit.*/ocredit = -1/' /etc/security/pwquality.conf
    echo "Password quality requirements set"
fi

# Disable IPv6 (optional, if not needed)
# echo "[+] Disabling IPv6..."
# echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
# echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
# sysctl -p

# Enable SYN cookie protection
echo "[+] Enabling SYN flood protection..."
sysctl -w net.ipv4.tcp_syncookies=1
sysctl -w net.ipv4.tcp_max_syn_backlog=2048
sysctl -w net.ipv4.tcp_synack_retries=2
sysctl -w net.ipv4.tcp_syn_retries=5

# Disable IP forwarding (if not a router)
echo "[+] Disabling IP forwarding..."
sysctl -w net.ipv4.ip_forward=0

# Enable exec-shield
sysctl -w kernel.exec-shield=1 2>/dev/null
sysctl -w kernel.randomize_va_space=2 2>/dev/null

# Set secure file permissions
echo "[+] Setting secure permissions on sensitive files..."
chmod 644 /etc/passwd
chmod 640 /etc/shadow
chmod 644 /etc/group
chmod 640 /etc/gshadow 2>/dev/null
chmod 600 /etc/ssh/sshd_config

# Check for and remove common backdoor accounts
echo "[+] Checking for suspicious accounts..."
SUSPICIOUS=("backdoor" "hacker" "test" "guest" "admin")
for user in "${SUSPICIOUS[@]}"; do
    if id "$user" &>/dev/null; then
        echo "[!] FOUND SUSPICIOUS USER: $user"
        # Uncomment to automatically delete:
        # userdel -r "$user" 2>/dev/null
    fi
done

echo "========================================="
echo "QUICK HARDENING COMPLETE"
echo "Backups stored in: $BACKUP_DIR"
echo "========================================="

################################################################################
# File: phase1_initial/03_rotate_passwords.sh
# Purpose: Change all user passwords immediately
# Usage: sudo ./03_rotate_passwords.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "PASSWORD ROTATION - $(date)"
echo "========================================="

# IMPORTANT: Change this to your competition password
NEW_PASSWORD="Comp3titi0n!P@ssw0rd2024"

# Get list of human users (UID >= 1000, has shell)
USERS=$(awk -F: '$3 >= 1000 && $7 !~ /nologin|false/ && $1 != "nobody" {print $1}' /etc/passwd)

echo "Rotating passwords for users..."
for user in $USERS; do
    echo "$user:$NEW_PASSWORD" | chpasswd
    if [ $? -eq 0 ]; then
        echo "[+] Password changed for: $user"
    else
        echo "[!] Failed to change password for: $user"
    fi
done

# Change root password
echo "root:$NEW_PASSWORD" | chpasswd
if [ $? -eq 0 ]; then
    echo "[+] Root password changed"
else
    echo "[!] Failed to change root password"
fi

# Optionally force password change on next login
# Uncomment if you want users to change passwords themselves
# for user in $USERS; do
#     passwd -e "$user"
#     echo "[+] Password expiry set for: $user"
# done

# Log password changes
echo "$(date): Passwords rotated for all users" >> /root/password_changes.log

echo "========================================="
echo "PASSWORD ROTATION COMPLETE"
echo "New password: $NEW_PASSWORD"
echo "SAVE THIS SECURELY AND SHARE WITH TEAM"
echo "========================================="

# Display the password prominently
echo ""
echo "**********************************"
echo "NEW PASSWORD: $NEW_PASSWORD"
echo "**********************************"
echo ""

################################################################################
# File: phase1_initial/04_user_audit.sh
# Purpose: Find and document unauthorized users
# Usage: sudo ./04_user_audit.sh
################################################################################
#!/bin/bash

echo "========================================="
echo "USER AUDIT - $(date)"
echo "========================================="

# CRITICAL: Edit this list with YOUR authorized users
AUTHORIZED_USERS=("root" "ubuntu" "debian" "centos" "admin" "yourteam1" "yourteam2")

OUTPUT="user_audit_$(date +%Y%m%d_%H%M%S).txt"

{
echo "=== USER AUDIT REPORT ==="
echo "Date: $(date)"
echo ""

echo "=== CHECKING FOR UNAUTHORIZED USERS ==="
ALL_USERS=$(awk -F: '{print $1}' /etc/passwd)
FOUND_UNAUTHORIZED=0

for user in $ALL_USERS; do
    IS_AUTHORIZED=0
    for auth_user in "${AUTHORIZED_USERS[@]}"; do
        if [ "$user" == "$auth_user" ]; then
            IS_AUTHORIZED=1
            break
        fi
    done
    
    if [ $IS_AUTHORIZED -eq 0 ]; then
        # Check if it's a system account (UID < 1000)
        UID=$(id -u "$user" 2>/dev/null)
        if [ $UID -ge 1000 ]; then
            echo "[!] UNAUTHORIZED USER: $user (UID: $UID)"
            echo "    Shell: $(grep "^$user:" /etc/passwd | cut -d: -f7)"
            echo "    Home: $(grep "^$user:" /etc/passwd | cut -d: -f6)"
            echo "    Groups: $(groups "$user" 2>/dev/null)"
            echo "    Last login: $(lastlog -u "$user" 2>/dev/null | tail -1)"
            echo "    To remove: userdel -r $user"
            echo ""
            FOUND_UNAUTHORIZED=$((FOUND_UNAUTHORIZED + 1))
        fi
    fi
done

if [ $FOUND_UNAUTHORIZED -eq 0 ]; then
    echo "[+] No unauthorized users found"
fi

echo ""
echo "=== SUDO GROUP MEMBERS ==="
getent group sudo 2>/dev/null | cut -d: -f4
getent group wheel 2>/dev/null | cut -d: -f4
getent group admin 2>/dev/null | cut -d: -f4

echo ""
echo "=== USERS WITH UID 0 (ROOT PRIVILEGES) ==="
awk -F: '$3 == 0 {print $1 " (DANGER - Has UID 0)"}' /etc/passwd

echo ""
echo "=== USERS WITH EMPTY PASSWORDS ==="
awk -F: '($2 == "" || $2 == "!") {print $1}' /etc/shadow 2>/dev/null

echo ""
echo "=== USERS WITH NO PASSWORD EXPIRY ==="
while IFS=: read -r user _ _ _ max _; do
    if [ "$max" == "99999" ] && id "$user" &>/dev/null; then
        UID=$(id -u "$user")
        if [ $UID -ge 1000 ]; then
            echo "$user (needs password expiry)"
        fi
    fi
done < /etc/shadow 2>/dev/null

echo ""
echo "=== SUDOERS FILE ENTRIES ==="
grep -v "^#" /etc/sudoers 2>/dev/null | grep -v "^$"

echo ""
echo "=== SSH AUTHORIZED KEYS ==="
for home in /home/* /root; do
    if [ -f "$home/.ssh/authorized_keys" ]; then
        echo "Keys for $(basename $home):"
        cat "$home/.ssh/authorized_keys" 2>/dev/null
        echo ""
    fi
done

} | tee "$OUTPUT"

echo "========================================="
echo "USER AUDIT COMPLETE"
echo "Report saved to: $OUTPUT"
echo "========================================="

################################################################################
# PHASE 2: CONTINUOUS OPERATIONS (Throughout Competition)
################################################################################

################################################################################
# File: phase2_continuous/05_monitor.sh
# Purpose: Continuous system monitoring - run in background
# Usage: sudo ./05_monitor.sh &
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

LOGFILE="/root/monitor_$(date +%Y%m%d_%H%M%S).log"
ALERT_FILE="/root/ALERTS.txt"
BASELINE_USERS="/tmp/baseline_users.txt"
BASELINE_CRON="/tmp/baseline_cron.txt"
BASELINE_PROCS="/tmp/baseline_procs.txt"

echo "========================================="
echo "CONTINUOUS MONITORING STARTED"
echo "Log file: $LOGFILE"
echo "Alert file: $ALERT_FILE"
echo "Press Ctrl+C to stop"
echo "========================================="

# Create baselines
cat /etc/passwd > "$BASELINE_USERS"
crontab -l 2>/dev/null > "$BASELINE_CRON"
ps aux > "$BASELINE_PROCS"

while true; do
    echo "=== Monitor Check: $(date) ===" >> "$LOGFILE"
    
    # Check for new users
    if ! diff -q /etc/passwd "$BASELINE_USERS" &>/dev/null; then
        echo "[ALERT] $(date): USER CHANGE DETECTED" | tee -a "$ALERT_FILE"
        diff /etc/passwd "$BASELINE_USERS" >> "$ALERT_FILE"
        cat /etc/passwd > "$BASELINE_USERS"
    fi
    
    # Check for cron changes
    crontab -l 2>/dev/null > /tmp/current_cron.txt
    if ! diff -q /tmp/current_cron.txt "$BASELINE_CRON" &>/dev/null; then
        echo "[ALERT] $(date): CRON JOB CHANGE" | tee -a "$ALERT_FILE"
        diff /tmp/current_cron.txt "$BASELINE_CRON" >> "$ALERT_FILE"
        cp /tmp/current_cron.txt "$BASELINE_CRON"
    fi
    
    # Check active connections
    CONNECTIONS=$(ss -tupn 2>/dev/null | grep ESTAB | wc -l)
    echo "Active connections: $CONNECTIONS" >> "$LOGFILE"
    ss -tupn 2>/dev/null | grep ESTAB >> "$LOGFILE"
    
    # Check for suspicious processes
    ps aux | grep -E 'nc|ncat|netcat|/bin/sh -i|/bin/bash -i|perl.*socket|python.*socket' | grep -v grep >> "$LOGFILE"
    
    # Check listening ports
    echo "Listening ports:" >> "$LOGFILE"
    ss -tulpn 2>/dev/null >> "$LOGFILE"
    
    # Check for unauthorized sudo usage
    grep "sudo:" /var/log/auth.log 2>/dev/null | tail -5 >> "$LOGFILE"
    
    # Check disk usage (ransomware indicator)
    DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ $DISK_USAGE -gt 90 ]; then
        echo "[ALERT] $(date): DISK USAGE HIGH: $DISK_USAGE%" | tee -a "$ALERT_FILE"
    fi
    
    echo "---" >> "$LOGFILE"
    
    # Check if alert file has new content
    if [ -f "$ALERT_FILE" ] && [ $(wc -l < "$ALERT_FILE") -gt 0 ]; then
        echo -e "\n!!! CHECK $ALERT_FILE FOR ALERTS !!!\n"
    fi
    
    sleep 60
done

