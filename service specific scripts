################################################################################
# PHASE 4: SERVICE-SPECIFIC SCRIPTS
################################################################################

################################################################################
# File: service_specific/11_harden_apache.sh
# Purpose: Harden Apache web server
# Usage: sudo ./11_harden_apache.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

if ! command -v apache2 &>/dev/null && ! command -v httpd &>/dev/null; then
    echo "Apache not found"
    exit 1
fi

echo "========================================="
echo "APACHE HARDENING - $(date)"
echo "========================================="

# Determine Apache binary and config
if command -v apache2 &>/dev/null; then
    APACHE_BIN="apache2"
    APACHE_CONF="/etc/apache2/apache2.conf"
    APACHE_DIR="/etc/apache2"
    SITES_DIR="/etc/apache2/sites-available"
else
    APACHE_BIN="httpd"
    APACHE_CONF="/etc/httpd/conf/httpd.conf"
    APACHE_DIR="/etc/httpd"
    SITES_DIR="/etc/httpd/conf.d"
fi

# Backup configuration
BACKUP_DIR="/root/apache_backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r "$APACHE_DIR" "$BACKUP_DIR/"
echo "[+] Backup created: $BACKUP_DIR"

# Remove default pages
echo "[+] Removing default pages..."
rm -f /var/www/html/index.html 2>/dev/null
rm -f /var/www/html/index.nginx-debian.html 2>/dev/null
echo "Apache2 Secured" > /var/www/html/index.html

# Create security.conf
SECURITY_CONF="$APACHE_DIR/conf-available/security-custom.conf"
if [ -d "$APACHE_DIR/conf-available" ]; then
    echo "[+] Creating security configuration..."
    cat > "$SECURITY_CONF" << 'EOF'
# Hide Apache version
ServerTokens Prod
ServerSignature Off

# Disable directory listing
<Directory /var/www/>
    Options -Indexes
    AllowOverride None
    Require all granted
</Directory>

# Disable unnecessary HTTP methods
<Location />
    <LimitExcept GET POST HEAD>
        Require all denied
    </LimitExcept>
</Location>

# Clickjacking protection
Header always append X-Frame-Options SAMEORIGIN

# XSS Protection
Header set X-XSS-Protection "1; mode=block"

# Prevent MIME sniffing
Header set X-Content-Type-Options nosniff

# Disable ETags
FileETag None

# Timeout settings
Timeout 60
KeepAliveTimeout 5

# Limit request size (10MB)
LimitRequestBody 10485760
EOF

    # Enable the configuration
    if command -v a2enconf &>/dev/null; then
        a2enconf security-custom
    fi
fi

# Set proper permissions
echo "[+] Setting secure file permissions..."
find /var/www -type d -exec chmod 755 {} \;
find /var/www -type f -exec chmod 644 {} \;
chown -R www-data:www-data /var/www 2>/dev/null || chown -R apache:apache /var/www 2>/dev/null

# Disable unnecessary modules
echo "[+] Disabling unnecessary modules..."
DISABLE_MODS="autoindex status userdir"
for mod in $DISABLE_MODS; do
    a2dismod $mod 2>/dev/null
done

# Enable security modules
echo "[+] Enabling security modules..."
ENABLE_MODS="headers rewrite ssl"
for mod in $ENABLE_MODS; do
    a2enmod $mod 2>/dev/null
done

# Test configuration
echo "[+] Testing Apache configuration..."
$APACHE_BIN -t

# Restart Apache
read -p "Restart Apache now? (y/N): " restart
if [ "$restart" == "y" ]; then
    systemctl restart apache2 2>/dev/null || systemctl restart httpd 2>/dev/null
    echo "[+] Apache restarted"
fi

echo "========================================="
echo "APACHE HARDENING COMPLETE"
echo "========================================="

################################################################################
# File: service_specific/12_harden_mysql.sh
# Purpose: Harden MySQL/MariaDB database
# Usage: sudo ./12_harden_mysql.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "MYSQL/MARIADB HARDENING - $(date)"
echo "========================================="

# Check if MySQL is installed
if ! command -v mysql &>/dev/null; then
    echo "MySQL/MariaDB not found"
    exit 1
fi

echo "[!] This script will ask for the current MySQL root password"
read -sp "Enter current MySQL root password: " CURRENT_PASS
echo ""
read -sp "Enter NEW MySQL root password: " NEW_PASS
echo ""

# Test connection
if ! mysql -uroot -p"$CURRENT_PASS" -e "SELECT 1;" &>/dev/null; then
    echo "[!] Failed to connect to MySQL. Check password."
    exit 1
fi

echo "[+] Connected to MySQL successfully"

# Run hardening SQL commands
mysql -uroot -p"$CURRENT_PASS" << EOF
-- Change root password
ALTER USER 'root'@'localhost' IDENTIFIED BY '$NEW_PASS';

-- Remove anonymous users
DELETE FROM mysql.user WHERE User='';

-- Remove remote root login
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');

-- Drop test database
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';

-- Remove users without passwords
DELETE FROM mysql.user WHERE authentication_string='';

-- Flush privileges
FLUSH PRIVILEGES;

-- Show remaining users
SELECT User, Host FROM mysql.user;
EOF

echo "[+] MySQL security hardening applied"

# Secure my.cnf
echo "[+] Hardening MySQL configuration file..."
MY_CNF="/etc/mysql/my.cnf"
[ -f /etc/my.cnf ] && MY_CNF="/etc/my.cnf"

# Backup config
cp "$MY_CNF" "${MY_CNF}.backup.$(date +%Y%m%d_%H%M%S)"

# Add security settings (if not already present)
if ! grep -q "bind-address.*127.0.0.1" "$MY_CNF"; then
    cat >> "$MY_CNF" << 'EOF'

[mysqld]
# Bind to localhost only
bind-address = 127.0.0.1

# Disable LOAD DATA LOCAL INFILE
local-infile=0

# Enable logging
general_log = 1
general_log_file = /var/log/mysql/mysql.log
log_error = /var/log/mysql/error.log

# Disable symbolic links
symbolic-links=0
EOF
fi

echo "[+] MySQL configuration hardened"

# Set secure file permissions
chmod 644 "$MY_CNF"

# Restart MySQL
read -p "Restart MySQL now? (y/N): " restart
if [ "$restart" == "y" ]; then
    systemctl restart mysql 2>/dev/null || systemctl restart mariadb 2>/dev/null
    echo "[+] MySQL restarted"
fi

echo "========================================="
echo "MYSQL HARDENING COMPLETE"
echo "New root password: $NEW_PASS"
echo "========================================="

################################################################################
# File: service_specific/13_harden_ssh.sh
# Purpose: Advanced SSH hardening
# Usage: sudo ./13_harden_ssh.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "SSH HARDENING - $(date)"
echo "========================================="

SSHD_CONFIG="/etc/ssh/sshd_config"

# Backup original config
cp "$SSHD_CONFIG" "${SSHD_CONFIG}.backup.$(date +%Y%m%d_%H%M%S)"
echo "[+] Backup created"

# Apply hardening
echo "[+] Applying SSH hardening..."

# Function to set or replace config value
set_config() {
    local key="$1"
    local value="$2"
    if grep -q "^#*${key}" "$SSHD_CONFIG"; then
        sed -i "s/^#*${key}.*/${key} ${value}/" "$SSHD_CONFIG"
    else
        echo "${key} ${value}" >> "$SSHD_CONFIG"
    fi
}

# Apply all hardening settings
set_config "PermitRootLogin" "no"
set_config "PasswordAuthentication" "yes"
set_config "PermitEmptyPasswords" "no"
set_config "X11Forwarding" "no"
set_config "MaxAuthTries" "3"
set_config "ClientAliveInterval" "300"
set_config "ClientAliveCountMax" "2"
set_config "Protocol" "2"
set_config "LogLevel" "VERBOSE"
set_config "MaxSessions" "2"
set_config "TCPKeepAlive" "no"
set_config "AllowTcpForwarding" "no"
set_config "AllowAgentForwarding" "no"
set_config "PermitUserEnvironment" "no"

# Strong ciphers and MACs
if ! grep -q "^Ciphers" "$SSHD_CONFIG"; then
    cat >> "$SSHD_CONFIG" << 'EOF'

# Strong ciphers only
Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
EOF
fi

# Test configuration
echo "[+] Testing SSH configuration..."
sshd -t
if [ $? -ne 0 ]; then
    echo "[!] SSH configuration test failed! Restoring backup..."
    cp "${SSHD_CONFIG}.backup."* "$SSHD_CONFIG"
    exit 1
fi

# Restart SSH
read -p "Restart SSH now? (y/N): " restart
if [ "$restart" == "y" ]; then
    systemctl restart sshd 2>/dev/null || systemctl restart ssh 2>/dev/null
    echo "[+] SSH restarted"
fi

echo "========================================="
echo "SSH HARDENING COMPLETE"
echo "========================================="

################################################################################
# File: service_specific/14_harden_dns.sh
# Purpose: Harden BIND DNS server
# Usage: sudo ./14_harden_dns.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

if ! command -v named &>/dev/null; then
    echo "BIND DNS server not found"
    exit 1
fi

echo "========================================="
echo "DNS (BIND) HARDENING - $(date)"
echo "========================================="

NAMED_CONF="/etc/bind/named.conf.options"
[ -f /etc/named.conf ] && NAMED_CONF="/etc/named.conf"

# Backup config
cp "$NAMED_CONF" "${NAMED_CONF}.backup.$(date +%Y%m%d_%H%M%S)"
echo "[+] Backup created"

# Create hardened configuration
cat >> "$NAMED_CONF" << 'EOF'

// Security options
options {
    // Restrict zone transfers
    allow-transfer { none; };
    
    // Disable recursion for external queries
    recursion no;
    
    // Rate limiting
    rate-limit {
        responses-per-second 10;
        window 5;
    };
    
    // Hide version
    version "Not Available";
    
    // Enable query logging
    querylog yes;
    
    // Disable notify
    notify no;
};
EOF

echo "[+] DNS hardening configuration added"

# Test configuration
named-checkconf
if [ $? -ne 0 ]; then
    echo "[!] Configuration test failed"
    exit 1
fi

# Restart DNS
read -p "Restart BIND now? (y/N): " restart
if [ "$restart" == "y" ]; then
    systemctl restart bind9 2>/dev/null || systemctl restart named 2>/dev/null
    echo "[+] BIND restarted"
fi

echo "========================================="
echo "DNS HARDENING COMPLETE"
echo "========================================="

################################################################################
# File: service_specific/15_harden_nginx.sh
# Purpose: Harden Nginx web server
# Usage: sudo ./15_harden_nginx.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

if ! command -v nginx &>/dev/null; then
    echo "Nginx not found"
    exit 1
fi

echo "========================================="
echo "NGINX HARDENING - $(date)"
echo "========================================="

NGINX_CONF="/etc/nginx/nginx.conf"
BACKUP_DIR="/root/nginx_backup_$(date +%Y%m%d_%H%M%S)"

# Backup configuration
mkdir -p "$BACKUP_DIR"
cp -r /etc/nginx "$BACKUP_DIR/"
echo "[+] Backup created: $BACKUP_DIR"

# Remove default pages
echo "[+] Removing default pages..."
rm -f /var/www/html/index.nginx-debian.html 2>/dev/null
echo "Nginx Secured" > /var/www/html/index.html

# Create security configuration
SECURITY_CONF="/etc/nginx/conf.d/security.conf"
echo "[+] Creating security configuration..."
cat > "$SECURITY_CONF" << 'EOF'
# Hide Nginx version
server_tokens off;

# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
limit_req_status 429;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;
limit_conn addr 10;

# Buffer overflow protection
client_body_buffer_size 1K;
client_header_buffer_size 1k;
client_max_body_size 10m;
large_client_header_buffers 2 1k;

# Timeouts
client_body_timeout 10;
client_header_timeout 10;
keepalive_timeout 5 5;
send_timeout 10;
EOF

# Set proper permissions
echo "[+] Setting secure file permissions..."
find /var/www -type d -exec chmod 755 {} \;
find /var/www -type f -exec chmod 644 {} \;
chown -R www-data:www-data /var/www 2>/dev/null

# Test configuration
echo "[+] Testing Nginx configuration..."
nginx -t

if [ $? -ne 0 ]; then
    echo "[!] Configuration test failed!"
    exit 1
fi

# Restart Nginx
read -p "Restart Nginx now? (y/N): " restart
if [ "$restart" == "y" ]; then
    systemctl restart nginx
    echo "[+] Nginx restarted"
fi

echo "========================================="
echo "NGINX HARDENING COMPLETE"
echo "========================================="

################################################################################
# UTILITY SCRIPTS
################################################################################

################################################################################
# File: utilities/16_quick_check.sh
# Purpose: Quick security status check
# Usage: sudo ./16_quick_check.sh
################################################################################
#!/bin/bash

echo "========================================="
echo "QUICK SECURITY CHECK - $(date)"
echo "========================================="

# Check firewall
echo "[Firewall Status]"
if command -v ufw &>/dev/null; then
    ufw status | head -5
elif command -v firewall-cmd &>/dev/null; then
    firewall-cmd --state
else
    echo "Checking iptables..."
    iptables -L -n | head -10
fi

# Check for root/sudo users
echo -e "\n[Privileged Users]"
echo "Root equivalent users (UID 0):"
awk -F: '$3 == 0 {print $1}' /etc/passwd
echo "Sudo group members:"
getent group sudo 2>/dev/null | cut -d: -f4
getent group wheel 2>/dev/null | cut -d: -f4

# Check active connections
echo -e "\n[Active Network Connections]"
ss -tupn 2>/dev/null | grep ESTAB | wc -l || netstat -tupn 2>/dev/null | grep ESTABLISHED | wc -l
echo "connections active"

# Check suspicious processes
echo -e "\n[Suspicious Processes]"
ps aux | grep -E 'nc |ncat|netcat|/bin/sh -i|/bin/bash -i' | grep -v grep

# Check last logins
echo -e "\n[Recent Logins]"
last -5

# Check cron jobs
echo -e "\n[Cron Jobs]"
echo "Root crontab lines:"
crontab -l 2>/dev/null | wc -l

# Check listening ports
echo -e "\n[Listening Ports]"
ss -tulpn 2>/dev/null | grep LISTEN | awk '{print $5}' | sort -u || netstat -tulpn 2>/dev/null | grep LISTEN | awk '{print $4}' | sort -u

echo "========================================="

################################################################################
# File: utilities/17_find_webshells.sh
# Purpose: Scan for web shells
# Usage: sudo ./17_find_webshells.sh [directory]
################################################################################
#!/bin/bash

SCAN_DIR="${1:-/var/www}"

if [ ! -d "$SCAN_DIR" ]; then
    echo "Directory not found: $SCAN_DIR"
    exit 1
fi

echo "========================================="
echo "WEB SHELL SCANNER - $(date)"
echo "Scanning: $SCAN_DIR"
echo "========================================="

OUTPUT="webshell_scan_$(date +%Y%m%d_%H%M%S).txt"

{
echo "=== WEB SHELL SCAN REPORT ==="
echo "Scan date: $(date)"
echo "Directory: $SCAN_DIR"
echo ""

# Common web shell patterns
PATTERNS=(
    "eval.*base64_decode"
    "system.*\\\$_"
    "exec.*\\\$_"
    "shell_exec.*\\\$_"
    "passthru.*\\\$_"
    "proc_open"
    "popen.*\\\$_"
    "curl_exec"
    "curl_multi_exec"
    "parse_ini_file.*\\\$_"
    "show_source"
    "file_get_contents.*\\\$_"
    "file_put_contents.*\\\$_"
    "fputs.*\\\$_"
    "fwrite.*\\\$_"
    "assert.*\\\$_"
    "create_function"
    "base64_decode.*eval"
    "gzinflate.*base64"
    "eval.*gzuncompress"
    "preg_replace.*\\/e"
    "\\$\\{.*\\(.*\\).*\\}"
)

echo "=== SCANNING FOR SUSPICIOUS PHP FILES ==="
for pattern in "${PATTERNS[@]}"; do
    echo -e "\nPattern: $pattern"
    find "$SCAN_DIR" -type f -name "*.php" -exec grep -l "$pattern" {} \; 2>/dev/null
done

echo -e "\n=== CHECKING FOR SUSPICIOUS FILE NAMES ==="
find "$SCAN_DIR" -type f \( -name "*shell*.php" -o -name "*cmd*.php" -o -name "*backdoor*.php" -o -name "c99*.php" -o -name "r57*.php" -o -name "b374k*.php" \) 2>/dev/null

echo -e "\n=== RECENTLY MODIFIED PHP FILES (last 24 hours) ==="
find "$SCAN_DIR" -type f -name "*.php" -mtime -1 -ls 2>/dev/null

echo -e "\n=== CHECKING UPLOAD DIRECTORIES ==="
find "$SCAN_DIR" -type d -name "*upload*" -o -name "*temp*" -o -name "*tmp*" 2>/dev/null | while read dir; do
    echo -e "\nDirectory: $dir"
    find "$dir" -type f -name "*.php" -ls 2>/dev/null
done

echo -e "\n=== WORLD-WRITABLE PHP FILES ==="
find "$SCAN_DIR" -type f -name "*.php" -perm -0002 -ls 2>/dev/null

echo -e "\n=== PHP FILES OWNED BY UNEXPECTED USERS ==="
find "$SCAN_DIR" -type f -name "*.php" ! -user www-data ! -user nginx ! -user apache ! -user root -ls 2>/dev/null

} | tee "$OUTPUT"

echo ""
echo "========================================="
echo "SCAN COMPLETE"
echo "Report saved to: $OUTPUT"
echo "========================================="

################################################################################
# File: utilities/18_network_monitor.sh
# Purpose: Monitor network connections in real-time
# Usage: sudo ./18_network_monitor.sh
################################################################################
#!/bin/bash

echo "========================================="
echo "NETWORK CONNECTION MONITOR"
echo "Press Ctrl+C to stop"
echo "========================================="

LOGFILE="/root/network_monitor_$(date +%Y%m%d_%H%M%S).log"

while true; do
    clear
    echo "=== NETWORK MONITOR - $(date) ==="
    echo ""
    
    echo "=== ESTABLISHED CONNECTIONS ==="
    ss -tupn 2>/dev/null | grep ESTAB || netstat -tupn 2>/dev/null | grep ESTABLISHED
    
    echo -e "\n=== LISTENING PORTS ==="
    ss -tulpn 2>/dev/null | grep LISTEN || netstat -tulpn 2>/dev/null | grep LISTEN
    
    echo -e "\n=== TOP 10 CONNECTIONS BY IP ==="
    ss -tupn 2>/dev/null | grep ESTAB | awk '{print $6}' | cut -d: -f1 | sort | uniq -c | sort -rn | head -10 || \
    netstat -tupn 2>/dev/null | grep ESTABLISHED | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -rn | head -10
    
    # Log connections
    echo "=== $(date) ===" >> "$LOGFILE"
    ss -tupn 2>/dev/null >> "$LOGFILE" || netstat -tupn 2>/dev/null >> "$LOGFILE"
    echo "" >> "$LOGFILE"
    
    sleep 5
done

################################################################################
# File: utilities/19_password_strength.sh
# Purpose: Check password strength for all users
# Usage: sudo ./19_password_strength.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "PASSWORD STRENGTH CHECK - $(date)"
echo "========================================="

# Check if john the ripper is available
if ! command -v john &>/dev/null; then
    echo "[!] John the Ripper not installed"
    echo "Install with: sudo apt install john"
    echo ""
    echo "Performing basic checks instead..."
    echo ""
fi

# Get users with passwords
USERS=$(awk -F: '$2 !~ /^!|^\*/ && $3 >= 1000 {print $1}' /etc/shadow 2>/dev/null)

echo "=== USERS WITH PASSWORDS ==="
echo "$USERS"
echo ""

# Check for empty passwords
echo "=== CHECKING FOR EMPTY PASSWORDS ==="
awk -F: '($2 == "" || $2 == "!") && $3 >= 1000 {print $1 " has no password!"}' /etc/shadow 2>/dev/null
echo ""

# Check password aging
echo "=== PASSWORD AGING INFORMATION ==="
for user in $USERS; do
    chage -l "$user" 2>/dev/null | grep "Password expires"
done
echo ""

# Check for accounts with no expiry
echo "=== ACCOUNTS WITH NO PASSWORD EXPIRY ==="
awk -F: '$5 == 99999 && $3 >= 1000 {print $1}' /etc/shadow 2>/dev/null
echo ""

echo "========================================="
echo "TIP: Ensure all passwords are at least 12 characters"
echo "with uppercase, lowercase, numbers, and symbols"
echo "========================================="

################################################################################
# File: utilities/20_generate_report.sh
# Purpose: Generate final incident report template
# Usage: ./20_generate_report.sh
################################################################################
#!/bin/bash

OUTPUT="FINAL_INCIDENT_REPORT_$(date +%Y%m%d_%H%M%S).md"

cat > "$OUTPUT" << 'EOF'
# INCIDENT RESPONSE REPORT
## IRSeC Competition

**Date:** [Competition Date]  
**Team:** [Your Team Name]  
**Team Members:** [List all members]  
**Report Prepared By:** [Your Name]

---

## EXECUTIVE SUMMARY

[Provide a brief 2-3 paragraph overview of the competition, major incidents encountered, and overall team performance]

---

## SYSTEM INVENTORY

### Systems Under Our Control

| System | IP Address | OS | Role | Services |
|--------|------------|----|----- |----------|
| System 1 | 10.0.0.1 | Ubuntu 20.04 | Web Server | Apache, MySQL |
| System 2 | 10.0.0.2 | Windows Server 2019 | Domain Controller | AD, DNS |
| System 3 | 10.0.0.3 | CentOS 8 | Mail Server | Postfix, Dovecot |
| System 4 | 10.0.0.4 | Windows 10 | Workstation | IIS, SQL Server |

---

## TIMELINE OF EVENTS

### Initial Phase (00:00 - 00:05)

**00:00:30 - System Enumeration**
- Action: Deployed enumeration scripts on all systems
- Findings: Discovered [X] systems, [Y] services running
- Team Member: [Name]

**00:01:00 - Password Rotation**
- Action: Changed all default passwords
- Systems: All 4 systems
- New password documented in secure location
- Team Member: [Name]

**00:02:00 - Firewall Configuration**
- Action: Enabled firewalls on all systems
- Configuration: Default deny inbound, allow essential services
- Team Member: [Name]

**00:03:30 - SSH/RDP Hardening**
- Action: Hardened remote access
- Changes: Disabled root login, limited auth tries, configured timeouts
- Team Member: [Name]

**00:05:00 - Initial Threat Hunt**
- Action: Ran threat hunting scripts
- Findings: [Describe any backdoors found]
- Team Member: [Name]

### Incident 1: [Title] (00:15 - 00:25)

**Discovery:**
- Time: 00:15:23
- How Detected: [Monitoring alert / Log analysis / Manual inspection]
- Initial Indicator: [What tipped you off]

**Investigation:**
- Attack Vector: [How did the attacker get in]
- Affected Systems: [List systems]
- Compromised Accounts: [Any compromised accounts]
- IOCs Identified:
  - IP Addresses: [List suspicious IPs]
  - File Hashes: [If applicable]
  - Suspicious Files: [Paths to malicious files]
  - Processes: [Suspicious process names/PIDs]

**Impact:**
- Confidentiality: [Was data accessed?]
- Integrity: [Were files modified?]
- Availability: [Were services disrupted?]

**Response Actions:**
1. [00:16:00] Isolated affected system from network
2. [00:17:30] Killed malicious process (PID: XXXX)
3. [00:18:00] Removed backdoor user account
4. [00:19:00] Deleted web shell at /var/www/html/shell.php
5. [00:20:00] Changed passwords for all accounts
6. [00:21:00] Restored service
7. [00:22:00] Verified system integrity
8. [00:23:00] Resumed monitoring

**Evidence Collected:**
- Screenshots: [Describe]
- Log excerpts: [Describe]
- Files preserved: [List]

**Lessons Learned:**
- Root Cause: [What vulnerability was exploited]
- Prevention: [How to prevent in future]

### Incident 2: [Title] (00:45 - 01:00)

[Repeat same structure as Incident 1]

### Incident 3: [Title] (01:30 - 01:45)

[Repeat same structure]

---

## INJECT RESPONSES

### Inject 1: [Title]

**Received:** 00:30:00  
**Completed:** 00:42:00  
**Point Value:** 50 points  

**Requirements:**
- [List inject requirements]

**Actions Taken:**
- [Step-by-step what you did]

**Verification:**
- [How you verified completion]
- [Screenshots/evidence]

**Challenges:**
- [Any difficulties encountered]

### Inject 2: [Title]

[Repeat for each inject]

---

## SECURITY MEASURES IMPLEMENTED

### Network Security

**Firewall Configuration:**
- Default deny inbound traffic
- Allow only: SSH (22), HTTP (80), HTTPS (443), DNS (53)
- Egress filtering: Blocked suspicious IPs
- Rate limiting implemented

**Network Monitoring:**
- Continuous monitoring script deployed
- IDS/IPS: [If applicable]
- Traffic analysis performed every 30 minutes

### System Hardening

**Linux Systems:**
- Password policies: 12 character minimum, complexity required
- SSH: Root login disabled, key-based auth encouraged, max 3 auth tries
- Services: Disabled telnet, FTP, unnecessary services
- File permissions: Secured sensitive files (600/644/755)
- Audit logging: Enabled auditd
- Regular updates applied

**Windows Systems:**
- Group Policy: Security baseline applied
- User accounts: Disabled guest, removed unauthorized users
- Services: Disabled unnecessary services
- Windows Firewall: Enabled with restrictive rules
- Audit policies: Enabled for all categories
- Windows Defender: Updated and running

### Application Security

**Web Servers:**
- Removed default pages
- Disabled directory listing
- Hidden server version
- ModSecurity/WAF enabled
- SSL/TLS configured
- Regular web shell scans

**Databases:**
- Changed default passwords
- Removed test databases
- Disabled remote root access
- Query logging enabled
- Least privilege principle applied

**Other Services:**
- DNS: Restricted zone transfers
- Mail: Prevented open relay, SPF/DKIM configured
- FTP: Disabled anonymous access, chroot enabled

---

## INDICATORS OF COMPROMISE (IOCs)

### Network IOCs

| IP Address | Port | First Seen | Activity | Action Taken |
|------------|------|------------|----------|--------------|
| 192.168.1.100 | 4444 | 00:15 | Reverse shell | Blocked at firewall |
| 10.10.10.50 | 80 | 00:45 | SQL injection | Blocked at firewall |

### File IOCs

| File Path | Hash (if available) | Description | Action Taken |
|-----------|---------------------|-------------|--------------|
| /var/www/html/shell.php | - | Web shell | Deleted |
| /tmp/.hidden | - | Backdoor script | Deleted |

### Account IOCs

| Username | System | Description | Action Taken |
|----------|--------|-------------|--------------|
| backdoor | Linux-01 | Unauthorized user | Deleted |
| hacker | Windows-DC | Unauthorized admin | Deleted |

---

## ATTACK PATTERNS OBSERVED

### Attack Pattern 1: SQL Injection
- **Frequency:** [Number of attempts]
- **Target:** Web application login form
- **Success Rate:** 0% (blocked by input validation)
- **Mitigation:** Implemented prepared statements

### Attack Pattern 2: Brute Force SSH
- **Frequency:** [Number of attempts]
- **Target:** All Linux systems
- **Success Rate:** 0% (fail2ban blocked after 3 attempts)
- **Mitigation:** Fail2ban with 3 try limit

[Continue for other patterns]

---

## CHALLENGES ENCOUNTERED

1. **Challenge:** [Describe challenge]
   - **Impact:** [How it affected response]
   - **Resolution:** [How you overcame it]

2. **Challenge:** [Describe challenge]
   - **Impact:** [How it affected response]
   - **Resolution:** [How you overcame it]

---

## RECOMMENDATIONS

### Immediate Actions (If This Were Real)

1. **Password Management**
   - Implement password manager
   - Enforce MFA on all administrative accounts
   - Regular password rotation policy

2. **Network Segmentation**
   - Separate production and admin networks
   - Implement VLANs
   - DMZ for public-facing services

3. **Monitoring and Alerting**
   - Deploy SIEM solution
   - Real-time alerting for critical events
   - Automated incident response playbooks

### Long-Term Improvements

1. **Security Training**
   - Regular security awareness training
   - Phishing simulations
   - Incident response drills

2. **Infrastructure**
   - Upgrade legacy systems
   - Implement security orchestration
   - Regular penetration testing

3. **Documentation**
   - Maintain updated network diagrams
   - Document all security controls
   - Create incident response playbooks

---

## STATISTICS

**Overall Performance:**
- Total Incidents Detected: [X]
- Total Incidents Resolved: [X]
- Average Response Time: [X minutes]
- Injects Completed: [X / Y]
- Points Earned: [Total]

**System Uptime:**
- System 1: [%]
- System 2: [%]
- System 3: [%]
- System 4: [%]

**Attack Statistics:**
- Total Attack Attempts Detected: [X]
- Successful Attacks: [X]
- Blocked Attacks: [X]
- Attack Success Rate: [X%]

---

## CONCLUSION

[2-3 paragraphs summarizing:
- Overall team performance
- Key successes
- Areas for improvement
- Lessons learned
- Final thoughts]

---

## APPENDICES

### Appendix A: Configuration Files
[Include sanitized copies of key configurations]

### Appendix B: Log Excerpts
[Include relevant log entries]

### Appendix C: Screenshots
[Reference evidence screenshots]

### Appendix D: Tools Used
- Enumeration: Custom bash scripts
- Monitoring: Custom monitoring scripts
- Log Analysis: grep, awk, sed
- Network Analysis: ss, netstat, tcpdump
- Web Security: ModSecurity
- Password Security: Automated rotation scripts

---

**Report End**

*This report contains sensitive security information and should be handled accordingly.*
EOF

echo "========================================="
echo "REPORT TEMPLATE GENERATED"
echo "File: $OUTPUT"
echo "========================================="
echo ""
echo "Edit this template and fill in all sections"
echo "during and after the competition."
echo ""
