################################################################################
# PHASE 3: INCIDENT RESPONSE (When Attacks Detected)
################################################################################

################################################################################
# File: phase3_incident/08_log_incident.sh
# Purpose: Document incidents with system state capture
# Usage: sudo ./08_log_incident.sh
################################################################################
#!/bin/bash

INCIDENT_LOG="/root/incidents.txt"
INCIDENT_DIR="/root/incidents"
mkdir -p "$INCIDENT_DIR"

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
INCIDENT_FILE="$INCIDENT_DIR/incident_$TIMESTAMP.txt"

echo "========================================="
echo "INCIDENT LOGGER"
echo "========================================="

{
echo "========================================="
echo "INCIDENT REPORT"
echo "Timestamp: $(date)"
echo "========================================="

read -p "Incident Title/Summary: " title
echo "Title: $title"

read -p "Severity (Low/Medium/High/Critical): " severity
echo "Severity: $severity"

read -p "Affected System/Service: " affected
echo "Affected: $affected"

read -p "Description of incident: " description
echo "Description: $description"

read -p "Attack vector (if known): " vector
echo "Attack Vector: $vector"

read -p "Actions taken: " actions
echo "Actions Taken: $actions"

echo ""
echo "=== SYSTEM STATE CAPTURE ==="
echo "Captured at: $(date)"

echo -e "\n=== Current Users ==="
who

echo -e "\n=== User Accounts ==="
cat /etc/passwd

echo -e "\n=== Active Processes (top 30) ==="
ps auxf | head -30

echo -e "\n=== Network Connections ==="
ss -tupn 2>/dev/null || netstat -tupn 2>/dev/null

echo -e "\n=== Listening Ports ==="
ss -tulpn 2>/dev/null || netstat -tulpn 2>/dev/null

echo -e "\n=== Recent Auth Log Entries ==="
tail -50 /var/log/auth.log 2>/dev/null || tail -50 /var/log/secure 2>/dev/null

echo -e "\n=== Cron Jobs ==="
crontab -l 2>/dev/null

echo -e "\n=== Recent Commands (bash history) ==="
history | tail -50

echo -e "\n=== Disk Usage ==="
df -h

echo -e "\n=== Memory Usage ==="
free -h

echo -e "\n=== Load Average ==="
uptime

echo ""
echo "========================================="
echo "END INCIDENT REPORT"
echo "========================================="

} | tee "$INCIDENT_FILE"

# Also append to master incident log
echo "" >> "$INCIDENT_LOG"
cat "$INCIDENT_FILE" >> "$INCIDENT_LOG"

echo ""
echo "Incident logged to:"
echo "  - $INCIDENT_FILE"
echo "  - $INCIDENT_LOG"
echo ""

################################################################################
# File: phase3_incident/09_capture_evidence.sh
# Purpose: Capture forensic evidence during active incident
# Usage: sudo ./09_capture_evidence.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

EVIDENCE_DIR="/root/evidence_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$EVIDENCE_DIR"

echo "========================================="
echo "EVIDENCE COLLECTION - $(date)"
echo "Evidence directory: $EVIDENCE_DIR"
echo "========================================="

# Memory dump (if possible)
echo "[+] Capturing running processes..."
ps auxf > "$EVIDENCE_DIR/processes.txt"
pstree -p > "$EVIDENCE_DIR/process_tree.txt"

# Network state
echo "[+] Capturing network state..."
ss -tupn > "$EVIDENCE_DIR/network_connections.txt" 2>/dev/null || netstat -tupn > "$EVIDENCE_DIR/network_connections.txt"
ss -tulpn > "$EVIDENCE_DIR/listening_ports.txt" 2>/dev/null || netstat -tulpn > "$EVIDENCE_DIR/listening_ports.txt"
ip addr > "$EVIDENCE_DIR/ip_addresses.txt"
ip route > "$EVIDENCE_DIR/routing_table.txt"
arp -a > "$EVIDENCE_DIR/arp_cache.txt" 2>/dev/null

# User state
echo "[+] Capturing user information..."
cp /etc/passwd "$EVIDENCE_DIR/"
cp /etc/shadow "$EVIDENCE_DIR/" 2>/dev/null
cp /etc/group "$EVIDENCE_DIR/"
who > "$EVIDENCE_DIR/logged_in_users.txt"
w > "$EVIDENCE_DIR/user_activity.txt"
last -50 > "$EVIDENCE_DIR/last_logins.txt"
lastlog > "$EVIDENCE_DIR/last_log.txt"

# Copy critical logs
echo "[+] Copying log files..."
mkdir -p "$EVIDENCE_DIR/logs"
cp /var/log/auth.log* "$EVIDENCE_DIR/logs/" 2>/dev/null
cp /var/log/secure* "$EVIDENCE_DIR/logs/" 2>/dev/null
cp /var/log/syslog* "$EVIDENCE_DIR/logs/" 2>/dev/null
cp /var/log/messages* "$EVIDENCE_DIR/logs/" 2>/dev/null
cp -r /var/log/apache2 "$EVIDENCE_DIR/logs/" 2>/dev/null
cp -r /var/log/nginx "$EVIDENCE_DIR/logs/" 2>/dev/null

# Scheduled tasks
echo "[+] Capturing scheduled tasks..."
crontab -l > "$EVIDENCE_DIR/root_crontab.txt" 2>/dev/null
cp /etc/crontab "$EVIDENCE_DIR/" 2>/dev/null
ls -laR /etc/cron.* > "$EVIDENCE_DIR/cron_directories.txt" 2>/dev/null
systemctl list-timers --all > "$EVIDENCE_DIR/systemd_timers.txt" 2>/dev/null

# File system
echo "[+] Capturing file system information..."
df -h > "$EVIDENCE_DIR/disk_usage.txt"
mount > "$EVIDENCE_DIR/mounted_filesystems.txt"
find / -type f -mtime -1 2>/dev/null > "$EVIDENCE_DIR/recently_modified_files.txt"
find / -type f -perm -4000 2>/dev/null > "$EVIDENCE_DIR/suid_files.txt"

# Services
echo "[+] Capturing service information..."
systemctl list-units --type=service > "$EVIDENCE_DIR/services.txt" 2>/dev/null
service --status-all > "$EVIDENCE_DIR/services_status.txt" 2>/dev/null

# Kernel modules
echo "[+] Capturing kernel modules..."
lsmod > "$EVIDENCE_DIR/kernel_modules.txt"

# Environment
echo "[+] Capturing environment..."
env > "$EVIDENCE_DIR/environment.txt"

# Capture bash histories
echo "[+] Capturing command histories..."
mkdir -p "$EVIDENCE_DIR/histories"
for home in /home/* /root; do
    if [ -f "$home/.bash_history" ]; then
        cp "$home/.bash_history" "$EVIDENCE_DIR/histories/$(basename $home)_bash_history" 2>/dev/null
    fi
done

# Package information
echo "[+] Capturing package information..."
dpkg -l > "$EVIDENCE_DIR/installed_packages.txt" 2>/dev/null || rpm -qa > "$EVIDENCE_DIR/installed_packages.txt" 2>/dev/null

# Create evidence manifest
echo "[+] Creating manifest..."
{
    echo "Evidence Collection Report"
    echo "Collected: $(date)"
    echo "Hostname: $(hostname)"
    echo "Collected by: $(whoami)"
    echo ""
    echo "Files collected:"
    find "$EVIDENCE_DIR" -type f -exec ls -lh {} \;
} > "$EVIDENCE_DIR/MANIFEST.txt"

# Create tarball
echo "[+] Creating evidence archive..."
tar czf "${EVIDENCE_DIR}.tar.gz" "$EVIDENCE_DIR" 2>/dev/null

echo "========================================="
echo "EVIDENCE COLLECTION COMPLETE"
echo "Directory: $EVIDENCE_DIR"
echo "Archive: ${EVIDENCE_DIR}.tar.gz"
echo "========================================="

################################################################################
# File: phase3_incident/10_kill_backdoor.sh
# Purpose: Remove common backdoor mechanisms
# Usage: sudo ./10_kill_backdoor.sh
################################################################################
#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root (sudo)"
  exit 1
fi

echo "========================================="
echo "BACKDOOR REMOVAL - $(date)"
echo "========================================="

LOG="backdoor_removal_$(date +%Y%m%d_%H%M%S).log"

{
echo "=== BACKDOOR REMOVAL LOG ==="
echo "Date: $(date)"

# Kill suspicious processes
echo -e "\n[+] Killing suspicious processes..."
SUSPICIOUS_PROCS=$(ps aux | grep -E 'nc|ncat|/bin/sh -i|/bin/bash -i|perl.*socket|python.*socket' | grep -v grep | awk '{print $2}')
if [ -n "$SUSPICIOUS_PROCS" ]; then
    for pid in $SUSPICIOUS_PROCS; do
        PROC_INFO=$(ps -p $pid -o pid,user,cmd)
        echo "Killing PID $pid: $PROC_INFO"
        kill -9 $pid
    done
else
    echo "No suspicious processes found"
fi

# Check and clean cron jobs
echo -e "\n[+] Checking cron jobs..."
echo "Current root crontab:"
crontab -l 2>/dev/null
read -p "Remove all root cron jobs? (y/N): " remove_cron
if [ "$remove_cron" == "y" ]; then
    crontab -r
    echo "Root crontab cleared"
fi

# Remove suspicious SSH keys
echo -e "\n[+] Checking SSH authorized keys..."
for home in /home/* /root; do
    AUTHKEYS="$home/.ssh/authorized_keys"
    if [ -f "$AUTHKEYS" ]; then
        echo "Keys in $AUTHKEYS:"
        cat "$AUTHKEYS"
        read -p "Remove suspicious keys from $AUTHKEYS? (y/N): " remove_keys
        if [ "$remove_keys" == "y" ]; then
            read -p "Enter line numbers to remove (comma-separated): " lines
            # This is interactive - consider backing up first
            cp "$AUTHKEYS" "${AUTHKEYS}.bak"
            echo "Backup created: ${AUTHKEYS}.bak"
        fi
    fi
done

# Check for backdoor users
echo -e "\n[+] Checking for backdoor users..."
echo "Users with UID >= 1000:"
awk -F: '$3 >= 1000 {print $1, $3, $7}' /etc/passwd
read -p "Enter username to delete (or press Enter to skip): " del_user
if [ -n "$del_user" ]; then
    userdel -r "$del_user" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo "User $del_user deleted"
    else
        echo "Failed to delete $del_user"
    fi
fi

# Remove web shells
echo -e "\n[+] Searching for web shells in /var/www..."
if [ -d /var/www ]; then
    find /var/www -name "*.php" -type f -exec grep -l "eval\|base64_decode\|system\|exec\|shell_exec" {} \; 2>/dev/null | while read file; do
        echo "Suspicious file: $file"
        read -p "Delete $file? (y/N): " del_file
        if [ "$del_file" == "y" ]; then
            rm "$file"
            echo "Deleted: $file"
        fi
    done
fi

# Check for suspicious startup scripts
echo -e "\n[+] Checking startup scripts..."
systemctl list-unit-files --type=service | grep enabled | grep -v "^systemd\|^dbus\|^getty"

# Remove suspicious kernel modules
echo -e "\n[+] Current kernel modules:"
lsmod | head -20
read -p "Enter module name to remove (or press Enter to skip): " rmmod_name
if [ -n "$rmmod_name" ]; then
    rmmod "$rmmod_name" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo "Module $rmmod_name removed"
    else
        echo "Failed to remove $rmmod_name"
    fi
fi

echo -e "\n=== BACKDOOR REMOVAL COMPLETE ==="

} | tee "$LOG"

echo "Log saved to: $LOG"
